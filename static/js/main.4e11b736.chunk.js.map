{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["FONTS","LANGUAGE","en","ko","App","state","theme","size","lang","desc","handleTheme","e","name","target","_this","setState","Object","defineProperty","handleLang","_this$setState2","_e$target","value","increase","decrease","_this2","this","_this$state","react_default","a","createElement","className","cx","App--invert","type","id","onChange","htmlFor","defaultChecked","onClick","map","font","index","key","style","fontSize","concat","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4e11b736.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport * as cx from 'classnames';\n\nconst FONTS = [\n  'uni-aTh',\n  'uni-bUl',\n  'uni-dRg',\n  'uni-eMd',\n  'uni-gBd',\n  'round-dRg',\n  'round-eMd',\n  'round-gBd',\n  'round-hEb',\n  'round-iHv'\n];\n\nconst LANGUAGE = {\n  en:\n    'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum',\n  ko:\n    '청춘의 위하여서, 하여도 것이다. 광야에서 할지니, 돋고, 이것이야말로 아름다우냐? 산야에 대한 길을 영락과 소리다.이것은 있을 뜨고, 가는 철환하였는가? 바로 원질이 소담스러운 없으면 대고, 주며, 창공에 이상은 이것이다. 가는 것은 인생을 그들을 그들의 기쁘며, 끝까지 옷을 사막이다. 길지 피가 찾아 위하여, 귀는 생의 넣는 봄바람이다. 피고, 예수는 두기 너의 일월과 그들을 이것이다. 앞이 천지는 트고, 관현악이며, 끝에 타오르고 것이다. 있음으로써 넣는 끓는 것이다.'\n};\n\nclass App extends Component {\n  state = {\n    theme: false,\n    size: 1.2,\n    lang: 'en',\n    desc:\n      'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum'\n  };\n\n  handleTheme = e => {\n    const { name } = e.target;\n    const { theme } = this.state;\n\n    this.setState({\n      [name]: !theme\n    });\n  };\n\n  handleLang = e => {\n    const { name, value } = e.target;\n\n    this.setState({\n      [name]: value,\n      desc: LANGUAGE[value]\n    });\n  };\n\n  increase = () => {\n    const { size } = this.state;\n\n    if (size > 4) return;\n\n    this.setState({\n      size: size + 0.1\n    });\n  };\n\n  decrease = () => {\n    const { size } = this.state;\n\n    if (size < 1) return;\n\n    this.setState({\n      size: size - 0.1\n    });\n  };\n\n  render() {\n    const { theme, size, desc } = this.state;\n\n    return (\n      <div className={cx('App', { 'App--invert': theme })}>\n        <header className=\"header\">\n          <h1>PW TYPOGRAPHY GUIDE</h1>\n\n          <div className=\"panel\">\n            <div className=\"panel__item\">\n              <input\n                type=\"checkbox\"\n                name=\"theme\"\n                id=\"theme\"\n                className=\"a11y\"\n                onChange={this.handleTheme}\n              />\n              <label className=\"label\" htmlFor=\"theme\">\n                Theme\n              </label>\n            </div>\n\n            <div className=\"panel__item\">\n              <input\n                type=\"radio\"\n                name=\"lang\"\n                value=\"en\"\n                id=\"en\"\n                className=\"a11y\"\n                onChange={this.handleLang}\n                defaultChecked\n              />\n              <label className=\"label\" htmlFor=\"en\">\n                En\n              </label>\n            </div>\n\n            <div className=\"panel__item\">\n              <input\n                type=\"radio\"\n                name=\"lang\"\n                value=\"ko\"\n                id=\"ko\"\n                className=\"a11y\"\n                onChange={this.handleLang}\n              />\n              <label className=\"label\" htmlFor=\"ko\">\n                Ko\n              </label>\n            </div>\n\n            <div className=\"panel__item\">\n              <span className=\"label\">size</span>\n              <button\n                type=\"button\"\n                className=\"btn\"\n                onClick={() => this.increase()}\n              >\n                +\n              </button>\n              <button\n                type=\"button\"\n                className=\"btn\"\n                onClick={() => this.decrease()}\n              >\n                -\n              </button>\n            </div>\n          </div>\n        </header>\n\n        <div className=\"typography\">\n          {FONTS.map((font, index) => (\n            <p className={font} key={index} style={{ fontSize: `${size}rem` }}>\n              <strong>{font}</strong> : {desc}\n            </p>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/style.scss';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}